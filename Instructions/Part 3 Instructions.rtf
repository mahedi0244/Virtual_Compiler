{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 AppleSymbols;\f2\ftech\fcharset77 Symbol;
}
{\colortbl;\red255\green255\blue255;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid601\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid7}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf0 \expnd0\expndtw0\kerning0
The objective of this project is to extend the parser implemented in Part 2 by a type checker and a variable-declaration checker. \
\
A 
\i type vector
\i0  is defined to be:\
\{ 
\f1 \uc0\u10216 
\f0 x
\fs26 \sub 1
\fs32 \nosupersub , t
\fs26 \sub 1
\f1\fs32 \nosupersub \uc0\u10217 
\f0 , \'85, 
\f1 \uc0\u10216 
\f0 x
\fs26 \sub n
\fs32 \nosupersub , t
\fs26 \sub n
\f1\fs32 \nosupersub \uc0\u10217 
\f0  \}\
where the x
\fs26 \sub i
\fs32 \nosupersub  are the variables declared in the program, including arrays, and the t
\fs26 \sub i
\fs32 \nosupersub  are their declared types. In our project language, the value of each t
\fs26 \sub i
\fs32 \nosupersub  is 
\i int
\i0 , 
\i float
\i0 , 
\i boolean
\i0 , or an 
\i array type
\i0 . An array type is represented by a tuple (elementType, n, a
\fs26 \sub 1
\fs32 \nosupersub , b
\fs26 \sub 1
\fs32 \nosupersub , \'85, a
\fs26 \sub n
\fs32 \nosupersub , b
\fs26 \sub n
\fs32 \nosupersub ) where n is the declared dimension of the array, and a
\fs26 \sub i
\fs32 \nosupersub , b
\fs26 \sub i
\fs32 \nosupersub  are the lower and upper bounds of the i-th index. For example, an array type int[10:20, 0:10, -10:-5] is represented by (int, 3, 10, 20, 0, 10, -10, -5). \
\
The variable-declaration checking part is to perform the following:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
ensure that no variable is declared more than once (with the same or different types); and\
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
ensure that a
\fs26 \sub i
\fs32 \nosupersub  \uc0\u8804  b
\fs26 \sub i
\fs32 \nosupersub , for each 1 \uc0\u8804  i \u8804  n.\
\pard\pardeftab720\partightenfactor0
\cf0 These are two simple forms of "static semantic analysis". You need to choose a suitable data structure to represent array types and build a map/table implementing a type vector. (I used Java HashMap.) This map/table is to be built by functions working on the portion of the parse tree for the variable declaration part. In this process, the above variable-declaration checking will also be performed. \
\
A commonly used, highly effective type checking method is by means of a 
\i type evaluation
\i0  function. The type evaluation function serves as a formal definition of the type rules of a programming language and can be implemented as a type checker. The definition of the type evaluation function for our language, called 
\i TypeEval
\i0 , is given below. To simplify the project, it uses rigid type rules to distinguish all three types 
\i int
\i0 , 
\i float
\i0 , 
\i boolean
\i0  without incorporating the standard implicit conversion from 
\i int
\i0  to 
\i float
\i0  adopted in many languages. \
\
\pard\pardeftab720\partightenfactor0

\b \cf0 Definition of TypeEval
\b0  \
\
The special symbol 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  will represent the type error value. For each expression E, TypeEval( E ) returns the type of E: 
\i int
\i0 , 
\i float
\i0 , 
\i boolean
\i0 , or 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub . For each statement S, TypeEval( S ) returns 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  or 
\i correct
\i0 . The special value 
\i correct
\i0  will represent the type correctness of S. \
\
In the following definition, the arguments of TypeEval will be given in abstract syntax. \
\

\b variables, constant literals, array variables
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
TypeEval( 
\i x
\i0  ) = 
\b if
\b0  
\i x
\i0  is not declared 
\b then
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  
\b else
\b0  declared type of 
\i x
\i0 , \'a0 for each identifier variable 
\i x
\i0 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
TypeEval( 
\i c
\i0  ) = type of 
\i c
\i0 , \'a0 for each constant literal 
\i c
\i0 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
TypeEval( a[E
\fs26 \sub 1
\fs32 \nosupersub , \'85, E
\fs26 \sub n
\fs32 \nosupersub ] ) = \'a0 // a[E
\fs26 \sub 1
\fs32 \nosupersub , \'85, E
\fs26 \sub n
\fs32 \nosupersub ] is an array variable \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b if
\b0  
\i a
\i0  is not declared to be an array type 
\b then
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else if
\b0  TypeEval(E
\fs26 \sub i
\fs32 \nosupersub ) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  for any i 
\b then
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else if
\b0  TypeEval(E
\fs26 \sub i
\fs32 \nosupersub ) \uc0\u8800  int for any i 
\b then
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else if
\b0  n \uc0\u8800  declared dimension of 
\i a
\i0  
\b then
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else
\b0  declared element type of 
\i a
\i0 \
\pard\pardeftab720\partightenfactor0

\b \cf0 arithmetic expressions
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
TypeEval( (+ E
\fs26 \sub 1
\fs32 \nosupersub  E
\fs26 \sub 2
\fs32 \nosupersub ) ) = \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b if
\b0  TypeEval(E
\fs26 \sub 1
\fs32 \nosupersub ) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  or TypeEval(E
\fs26 \sub 2
\fs32 \nosupersub ) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  
\b then
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else if
\b0  TypeEval(E
\fs26 \sub 1
\fs32 \nosupersub ) = int and TypeEval(E
\fs26 \sub 2
\fs32 \nosupersub ) = int 
\b then
\b0  int \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else if
\b0  TypeEval(E
\fs26 \sub 1
\fs32 \nosupersub ) = float and TypeEval(E
\fs26 \sub 2
\fs32 \nosupersub ) = float 
\b then
\b0  float \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Analogously for binary \uc0\u8722 , *, /. \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
TypeEval( (\uc0\u8722  E) ) = \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b if
\b0  TypeEval(E) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  
\b then
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else if
\b0  TypeEval(E) = int 
\b then
\b0  int \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else if
\b0  TypeEval(E) = float 
\b then
\b0  float \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub \
\pard\pardeftab720\partightenfactor0

\b \cf0 boolean expressions
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
TypeEval( (| E
\fs26 \sub 1
\fs32 \nosupersub  E
\fs26 \sub 2
\fs32 \nosupersub ) ) = \
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b if
\b0  TypeEval(E
\fs26 \sub 1
\fs32 \nosupersub ) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  or TypeEval(E
\fs26 \sub 2
\fs32 \nosupersub ) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  
\b then
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else if
\b0  TypeEval(E
\fs26 \sub 1
\fs32 \nosupersub ) = boolean and TypeEval(E
\fs26 \sub 2
\fs32 \nosupersub ) = boolean 
\b then
\b0  boolean \
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Analogously for &. \
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
TypeEval( (! E) ) = \
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b if
\b0  TypeEval(E) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  
\b then
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else if
\b0  TypeEval(E) = boolean 
\b then
\b0  boolean \
\ls4\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub \
\pard\pardeftab720\partightenfactor0

\b \cf0 comparison expressions
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
TypeEval( (< E
\fs26 \sub 1
\fs32 \nosupersub  E
\fs26 \sub 2
\fs32 \nosupersub ) ) = \
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b if
\b0  TypeEval(E
\fs26 \sub 1
\fs32 \nosupersub ) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  or TypeEval(E
\fs26 \sub 2
\fs32 \nosupersub ) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  
\b then
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else if
\b0  TypeEval(E
\fs26 \sub 1
\fs32 \nosupersub ) 
\f2 \uc0\u8712 
\f0  \{int, float\} and TypeEval(E
\fs26 \sub 2
\fs32 \nosupersub ) 
\f2 \uc0\u8712 
\f0  \{int, float\} 
\b then
\b0  boolean \
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Analogously for <=, >, >=. \
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
TypeEval( (= E
\fs26 \sub 1
\fs32 \nosupersub  E
\fs26 \sub 2
\fs32 \nosupersub ) ) = \
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b if
\b0  TypeEval(E
\fs26 \sub 1
\fs32 \nosupersub ) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  or TypeEval(E
\fs26 \sub 2
\fs32 \nosupersub ) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  
\b then
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else if
\b0  TypeEval(E
\fs26 \sub 1
\fs32 \nosupersub ) 
\f2 \uc0\u8712 
\f0  \{int, float\} and TypeEval(E
\fs26 \sub 2
\fs32 \nosupersub ) 
\f2 \uc0\u8712 
\f0  \{int, float\} 
\b then
\b0  boolean \
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else if
\b0  TypeEval(E
\fs26 \sub 1
\fs32 \nosupersub ) = boolean and TypeEval(E
\fs26 \sub 2
\fs32 \nosupersub ) = boolean 
\b then
\b0  boolean \
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\
\ls5\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Analogously for !=.\
\pard\pardeftab720\partightenfactor0

\b \cf0 statements
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
TypeEval( x = E ) = \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b if
\b0  TypeEval(x) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  or TypeEval(E) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  
\b then
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else if
\b0  TypeEval(x) = TypeEval(E) 
\b then
\b0  correct \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
TypeEval( 
\b if
\b0  (B) S ) = \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b if
\b0  TypeEval(B) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  or TypeEval(S) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  
\b then
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else if
\b0  TypeEval(B) = boolean 
\b then
\b0  correct \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
Analogously for 
\b while
\b0  (B) S. \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
TypeEval( 
\b if
\b0  (B) S
\fs26 \sub 1
\fs32 \nosupersub  
\b else
\b0  S
\fs26 \sub 2
\fs32 \nosupersub  ) = \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b if
\b0  TypeEval(B) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  or TypeEval(S
\fs26 \sub 1
\fs32 \nosupersub ) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  or TypeEval(S
\fs26 \sub 2
\fs32 \nosupersub ) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  
\b then
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else if
\b0  TypeEval(B) = boolean 
\b then
\b0  correct \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
TypeEval( 
\b print
\b0  E ) = \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b if
\b0  TypeEval(E) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  
\b then
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b else
\b0  correct \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
TypeEval( \{ s-list \} ) = TypeEval( s-list ), \'a0 for each block \{ s-list \} \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
TypeEval( statement s-list ) = \
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\'a0\'a0 
\b if
\b0  TypeEval(statement) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  or TypeEval(s-list) = 
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  
\b then
\b0  
\f2 \uc0\u8869 
\f0\fs26 \sub t
\fs32 \nosupersub  
\b else
\b0  correct\
\pard\pardeftab720\partightenfactor0
\cf0 TypeEval is to be implemented by functions in the syntactic-category classes for expressions and statements. The target objects of these typeEval( ) functions will be actual parse trees instead of abstract syntax. For example, type evaluation of a parse tree object, 
\i expr
\i0 , of 
\f1 \uc0\u10216 
\f0 expr
\f1 \uc0\u10217 
\f0  will be performed by a call 
\i expr
\i0 .typeEval( ). Whenever necessary, typeEval( ) will look up the type of a variable from the type vector. typeEval( ) must catch at least the first type error (preferably as many type errors as possible), and issue appropriate error messages. \
\
Your program is to:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0\cf0 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Read any text file that contains (what is intended to be) a string in the category 
\f1 \uc0\u10216 
\f0 program
\f1 \uc0\u10217 
\f0  and then construct an explicit parse tree as per Part 2.\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Build the type vector and and display its contents. (The order and display format of type vector components are not important.)\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Apply typeEval( ) to the parse tree for the entire 
\f1 \uc0\u10216 
\f0 statement
\f1 \uc0\u10217 
\f0  of the program.}